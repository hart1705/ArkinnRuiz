/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.20.0 (NJsonSchema v9.13.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IRetentionApprovalsClient {
    getAll(query: GetAllRetentionApprovalsQuery): Observable<RetentionApprovalsListViewModel | null>;
    get(id: string | null): Observable<RetentionApprovalDto | null>;
    create(command: CreateRetentionApprovalCommand): Observable<string | null>;
    update(id: string | null, command: UpdateRetentionApprovalCommand): Observable<RetentionApprovalDto | null>;
    delete(id: string | null): Observable<FileResponse | null>;
}

@Injectable()
export class RetentionApprovalsClient implements IRetentionApprovalsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(query: GetAllRetentionApprovalsQuery): Observable<RetentionApprovalsListViewModel | null> {
        let url_ = this.baseUrl + "/api/RetentionApprovals/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RetentionApprovalsListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionApprovalsListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RetentionApprovalsListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionApprovalsListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionApprovalsListViewModel | null>(<any>null);
    }

    get(id: string | null): Observable<RetentionApprovalDto | null> {
        let url_ = this.baseUrl + "/api/RetentionApprovals/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RetentionApprovalDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionApprovalDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RetentionApprovalDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionApprovalDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionApprovalDto | null>(<any>null);
    }

    create(command: CreateRetentionApprovalCommand): Observable<string | null> {
        let url_ = this.baseUrl + "/api/RetentionApprovals/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }

    update(id: string | null, command: UpdateRetentionApprovalCommand): Observable<RetentionApprovalDto | null> {
        let url_ = this.baseUrl + "/api/RetentionApprovals/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<RetentionApprovalDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionApprovalDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RetentionApprovalDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionApprovalDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionApprovalDto | null>(<any>null);
    }

    delete(id: string | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/RetentionApprovals/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IRetentionCollectionUnitPlansClient {
    getAll(query: GetAllRetentionCollectionUnitPlansQuery): Observable<RetentionCollectionUnitPlansListViewModel | null>;
    get(id: string | null): Observable<RetentionCollectionUnitPlanDto | null>;
    create(command: CreateRetentionCollectionUnitPlanCommand): Observable<string | null>;
    update(id: string | null, command: UpdateRetentionCollectionUnitPlanCommand): Observable<RetentionCollectionUnitPlanDto | null>;
    delete(id: string | null): Observable<FileResponse | null>;
}

@Injectable()
export class RetentionCollectionUnitPlansClient implements IRetentionCollectionUnitPlansClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(query: GetAllRetentionCollectionUnitPlansQuery): Observable<RetentionCollectionUnitPlansListViewModel | null> {
        let url_ = this.baseUrl + "/api/RetentionCollectionUnitPlans/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RetentionCollectionUnitPlansListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionCollectionUnitPlansListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RetentionCollectionUnitPlansListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionCollectionUnitPlansListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionCollectionUnitPlansListViewModel | null>(<any>null);
    }

    get(id: string | null): Observable<RetentionCollectionUnitPlanDto | null> {
        let url_ = this.baseUrl + "/api/RetentionCollectionUnitPlans/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RetentionCollectionUnitPlanDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionCollectionUnitPlanDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RetentionCollectionUnitPlanDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionCollectionUnitPlanDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionCollectionUnitPlanDto | null>(<any>null);
    }

    create(command: CreateRetentionCollectionUnitPlanCommand): Observable<string | null> {
        let url_ = this.baseUrl + "/api/RetentionCollectionUnitPlans/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }

    update(id: string | null, command: UpdateRetentionCollectionUnitPlanCommand): Observable<RetentionCollectionUnitPlanDto | null> {
        let url_ = this.baseUrl + "/api/RetentionCollectionUnitPlans/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<RetentionCollectionUnitPlanDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionCollectionUnitPlanDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RetentionCollectionUnitPlanDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionCollectionUnitPlanDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionCollectionUnitPlanDto | null>(<any>null);
    }

    delete(id: string | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/RetentionCollectionUnitPlans/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IRetentionsClient {
    getAll(): Observable<RetentionsListViewModel | null>;
    get(id: string | null): Observable<RetentionDto | null>;
    create(command: CreateRetentionCommand): Observable<string | null>;
    update(id: string | null, command: UpdateRetentionCommand): Observable<RetentionDto | null>;
    delete(id: string | null): Observable<FileResponse | null>;
}

@Injectable()
export class RetentionsClient implements IRetentionsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RetentionsListViewModel | null> {
        let url_ = this.baseUrl + "/api/Retentions/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RetentionsListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionsListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RetentionsListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionsListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionsListViewModel | null>(<any>null);
    }

    get(id: string | null): Observable<RetentionDto | null> {
        let url_ = this.baseUrl + "/api/Retentions/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RetentionDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RetentionDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionDto | null>(<any>null);
    }

    create(command: CreateRetentionCommand): Observable<string | null> {
        let url_ = this.baseUrl + "/api/Retentions/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }

    update(id: string | null, command: UpdateRetentionCommand): Observable<RetentionDto | null> {
        let url_ = this.baseUrl + "/api/Retentions/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<RetentionDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RetentionDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionDto | null>(<any>null);
    }

    delete(id: string | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Retentions/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IRetentionUnitsClient {
    getAll(query: GetAllRetentionUnitsQuery): Observable<RetentionUnitsListViewModel | null>;
    get(id: string | null): Observable<RetentionUnitDto | null>;
    create(command: CreateRetentionUnitCommand): Observable<string | null>;
    update(id: string | null, command: UpdateRetentionUnitCommand): Observable<RetentionUnitDto | null>;
    delete(id: string | null): Observable<FileResponse | null>;
}

@Injectable()
export class RetentionUnitsClient implements IRetentionUnitsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(query: GetAllRetentionUnitsQuery): Observable<RetentionUnitsListViewModel | null> {
        let url_ = this.baseUrl + "/api/RetentionUnits/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RetentionUnitsListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionUnitsListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RetentionUnitsListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionUnitsListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionUnitsListViewModel | null>(<any>null);
    }

    get(id: string | null): Observable<RetentionUnitDto | null> {
        let url_ = this.baseUrl + "/api/RetentionUnits/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RetentionUnitDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionUnitDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RetentionUnitDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionUnitDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionUnitDto | null>(<any>null);
    }

    create(command: CreateRetentionUnitCommand): Observable<string | null> {
        let url_ = this.baseUrl + "/api/RetentionUnits/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }

    update(id: string | null, command: UpdateRetentionUnitCommand): Observable<RetentionUnitDto | null> {
        let url_ = this.baseUrl + "/api/RetentionUnits/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<RetentionUnitDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionUnitDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RetentionUnitDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionUnitDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionUnitDto | null>(<any>null);
    }

    delete(id: string | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/RetentionUnits/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface IRetentionWaiversClient {
    getAll(): Observable<RetentionWaiversListViewModel | null>;
    get(id: string | null): Observable<RetentionWaiverDto | null>;
    create(command: CreateRetentionWaiverCommand): Observable<string | null>;
    update(id: string | null, command: UpdateRetentionWaiverCommand): Observable<RetentionWaiverDto | null>;
    delete(id: string | null): Observable<FileResponse | null>;
}

@Injectable()
export class RetentionWaiversClient implements IRetentionWaiversClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<RetentionWaiversListViewModel | null> {
        let url_ = this.baseUrl + "/api/RetentionWaivers/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<RetentionWaiversListViewModel | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionWaiversListViewModel | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<RetentionWaiversListViewModel | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionWaiversListViewModel.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionWaiversListViewModel | null>(<any>null);
    }

    get(id: string | null): Observable<RetentionWaiverDto | null> {
        let url_ = this.baseUrl + "/api/RetentionWaivers/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RetentionWaiverDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionWaiverDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RetentionWaiverDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionWaiverDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionWaiverDto | null>(<any>null);
    }

    create(command: CreateRetentionWaiverCommand): Observable<string | null> {
        let url_ = this.baseUrl + "/api/RetentionWaivers/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<string | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<string | null>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string | null>(<any>null);
    }

    update(id: string | null, command: UpdateRetentionWaiverCommand): Observable<RetentionWaiverDto | null> {
        let url_ = this.baseUrl + "/api/RetentionWaivers/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<RetentionWaiverDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<RetentionWaiverDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RetentionWaiverDto | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? RetentionWaiverDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RetentionWaiverDto | null>(<any>null);
    }

    delete(id: string | null): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/RetentionWaivers/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export interface ISampleDataClient {
    weatherForecasts(): Observable<WeatherForecast[] | null>;
}

@Injectable()
export class SampleDataClient implements ISampleDataClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    weatherForecasts(): Observable<WeatherForecast[] | null> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherForecasts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecasts(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processWeatherForecasts(response: HttpResponseBase): Observable<WeatherForecast[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[] | null>(<any>null);
    }
}

export class RetentionApprovalsListViewModel implements IRetentionApprovalsListViewModel {
    retentionApprovals?: RetentionApprovalDto[] | undefined;

    constructor(data?: IRetentionApprovalsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["retentionApprovals"] && data["retentionApprovals"].constructor === Array) {
                this.retentionApprovals = [] as any;
                for (let item of data["retentionApprovals"])
                    this.retentionApprovals!.push(RetentionApprovalDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RetentionApprovalsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionApprovalsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.retentionApprovals && this.retentionApprovals.constructor === Array) {
            data["retentionApprovals"] = [];
            for (let item of this.retentionApprovals)
                data["retentionApprovals"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRetentionApprovalsListViewModel {
    retentionApprovals?: RetentionApprovalDto[] | undefined;
}

export class RetentionApprovalDto implements IRetentionApprovalDto {
    id?: string | undefined;
    name?: string | undefined;
    position?: string | undefined;
    signiture?: string | undefined;
    approvalType!: ApprovalType;
    retentionId?: string | undefined;

    constructor(data?: IRetentionApprovalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.position = data["position"];
            this.signiture = data["signiture"];
            this.approvalType = data["approvalType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): RetentionApprovalDto {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionApprovalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["position"] = this.position;
        data["signiture"] = this.signiture;
        data["approvalType"] = this.approvalType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IRetentionApprovalDto {
    id?: string | undefined;
    name?: string | undefined;
    position?: string | undefined;
    signiture?: string | undefined;
    approvalType: ApprovalType;
    retentionId?: string | undefined;
}

export enum ApprovalType {
    Committee = 0, 
    Additional = 1, 
}

export class GetAllRetentionApprovalsQuery implements IGetAllRetentionApprovalsQuery {
    approvalType!: ApprovalType;

    constructor(data?: IGetAllRetentionApprovalsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.approvalType = data["approvalType"];
        }
    }

    static fromJS(data: any): GetAllRetentionApprovalsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRetentionApprovalsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["approvalType"] = this.approvalType;
        return data; 
    }
}

export interface IGetAllRetentionApprovalsQuery {
    approvalType: ApprovalType;
}

export class CreateRetentionApprovalCommand implements ICreateRetentionApprovalCommand {
    name?: string | undefined;
    position?: string | undefined;
    signiture?: string | undefined;
    approvalType!: ApprovalType;
    retentionId?: string | undefined;

    constructor(data?: ICreateRetentionApprovalCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.position = data["position"];
            this.signiture = data["signiture"];
            this.approvalType = data["approvalType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): CreateRetentionApprovalCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRetentionApprovalCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["position"] = this.position;
        data["signiture"] = this.signiture;
        data["approvalType"] = this.approvalType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface ICreateRetentionApprovalCommand {
    name?: string | undefined;
    position?: string | undefined;
    signiture?: string | undefined;
    approvalType: ApprovalType;
    retentionId?: string | undefined;
}

export class UpdateRetentionApprovalCommand implements IUpdateRetentionApprovalCommand {
    id?: string | undefined;
    name?: string | undefined;
    position?: string | undefined;
    signiture?: string | undefined;
    approvalType!: ApprovalType;
    retentionId?: string | undefined;

    constructor(data?: IUpdateRetentionApprovalCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.position = data["position"];
            this.signiture = data["signiture"];
            this.approvalType = data["approvalType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): UpdateRetentionApprovalCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRetentionApprovalCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["position"] = this.position;
        data["signiture"] = this.signiture;
        data["approvalType"] = this.approvalType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IUpdateRetentionApprovalCommand {
    id?: string | undefined;
    name?: string | undefined;
    position?: string | undefined;
    signiture?: string | undefined;
    approvalType: ApprovalType;
    retentionId?: string | undefined;
}

export class RetentionCollectionUnitPlansListViewModel implements IRetentionCollectionUnitPlansListViewModel {
    retentionCollectionUnitPlans?: RetentionCollectionUnitPlanDto[] | undefined;

    constructor(data?: IRetentionCollectionUnitPlansListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["retentionCollectionUnitPlans"] && data["retentionCollectionUnitPlans"].constructor === Array) {
                this.retentionCollectionUnitPlans = [] as any;
                for (let item of data["retentionCollectionUnitPlans"])
                    this.retentionCollectionUnitPlans!.push(RetentionCollectionUnitPlanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RetentionCollectionUnitPlansListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionCollectionUnitPlansListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.retentionCollectionUnitPlans && this.retentionCollectionUnitPlans.constructor === Array) {
            data["retentionCollectionUnitPlans"] = [];
            for (let item of this.retentionCollectionUnitPlans)
                data["retentionCollectionUnitPlans"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRetentionCollectionUnitPlansListViewModel {
    retentionCollectionUnitPlans?: RetentionCollectionUnitPlanDto[] | undefined;
}

export class RetentionCollectionUnitPlanDto implements IRetentionCollectionUnitPlanDto {
    id?: string | undefined;
    soldDate?: Date | undefined;
    reservedDate?: Date | undefined;
    paymentPlan?: string | undefined;
    firstInstallment?: Date | undefined;
    lastInstallment?: Date | undefined;
    noSettledInstallments!: number;
    noOfInstallments!: number;
    collectedAmount!: number;
    totalCollectedAmount!: number;
    collectedPercent!: number;
    dueAmount!: number;
    remainingAmount!: number;
    unitType!: UnitType;
    retentionId?: string | undefined;

    constructor(data?: IRetentionCollectionUnitPlanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.soldDate = data["soldDate"] ? new Date(data["soldDate"].toString()) : <any>undefined;
            this.reservedDate = data["reservedDate"] ? new Date(data["reservedDate"].toString()) : <any>undefined;
            this.paymentPlan = data["paymentPlan"];
            this.firstInstallment = data["firstInstallment"] ? new Date(data["firstInstallment"].toString()) : <any>undefined;
            this.lastInstallment = data["lastInstallment"] ? new Date(data["lastInstallment"].toString()) : <any>undefined;
            this.noSettledInstallments = data["noSettledInstallments"];
            this.noOfInstallments = data["noOfInstallments"];
            this.collectedAmount = data["collectedAmount"];
            this.totalCollectedAmount = data["totalCollectedAmount"];
            this.collectedPercent = data["collectedPercent"];
            this.dueAmount = data["dueAmount"];
            this.remainingAmount = data["remainingAmount"];
            this.unitType = data["unitType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): RetentionCollectionUnitPlanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionCollectionUnitPlanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["soldDate"] = this.soldDate ? this.soldDate.toISOString() : <any>undefined;
        data["reservedDate"] = this.reservedDate ? this.reservedDate.toISOString() : <any>undefined;
        data["paymentPlan"] = this.paymentPlan;
        data["firstInstallment"] = this.firstInstallment ? this.firstInstallment.toISOString() : <any>undefined;
        data["lastInstallment"] = this.lastInstallment ? this.lastInstallment.toISOString() : <any>undefined;
        data["noSettledInstallments"] = this.noSettledInstallments;
        data["noOfInstallments"] = this.noOfInstallments;
        data["collectedAmount"] = this.collectedAmount;
        data["totalCollectedAmount"] = this.totalCollectedAmount;
        data["collectedPercent"] = this.collectedPercent;
        data["dueAmount"] = this.dueAmount;
        data["remainingAmount"] = this.remainingAmount;
        data["unitType"] = this.unitType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IRetentionCollectionUnitPlanDto {
    id?: string | undefined;
    soldDate?: Date | undefined;
    reservedDate?: Date | undefined;
    paymentPlan?: string | undefined;
    firstInstallment?: Date | undefined;
    lastInstallment?: Date | undefined;
    noSettledInstallments: number;
    noOfInstallments: number;
    collectedAmount: number;
    totalCollectedAmount: number;
    collectedPercent: number;
    dueAmount: number;
    remainingAmount: number;
    unitType: UnitType;
    retentionId?: string | undefined;
}

export enum UnitType {
    Current = 0, 
    New = 1, 
}

export class GetAllRetentionCollectionUnitPlansQuery implements IGetAllRetentionCollectionUnitPlansQuery {
    unitType!: UnitType;

    constructor(data?: IGetAllRetentionCollectionUnitPlansQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitType = data["unitType"];
        }
    }

    static fromJS(data: any): GetAllRetentionCollectionUnitPlansQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRetentionCollectionUnitPlansQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitType"] = this.unitType;
        return data; 
    }
}

export interface IGetAllRetentionCollectionUnitPlansQuery {
    unitType: UnitType;
}

export class CreateRetentionCollectionUnitPlanCommand implements ICreateRetentionCollectionUnitPlanCommand {
    soldDate?: Date | undefined;
    reservedDate?: Date | undefined;
    paymentPlan?: string | undefined;
    firstInstallment?: Date | undefined;
    lastInstallment?: Date | undefined;
    noSettledInstallments!: number;
    noOfInstallments!: number;
    collectedAmount!: number;
    totalCollectedAmount!: number;
    collectedPercent!: number;
    dueAmount!: number;
    remainingAmount!: number;
    unitType!: UnitType;
    retentionId?: string | undefined;

    constructor(data?: ICreateRetentionCollectionUnitPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.soldDate = data["soldDate"] ? new Date(data["soldDate"].toString()) : <any>undefined;
            this.reservedDate = data["reservedDate"] ? new Date(data["reservedDate"].toString()) : <any>undefined;
            this.paymentPlan = data["paymentPlan"];
            this.firstInstallment = data["firstInstallment"] ? new Date(data["firstInstallment"].toString()) : <any>undefined;
            this.lastInstallment = data["lastInstallment"] ? new Date(data["lastInstallment"].toString()) : <any>undefined;
            this.noSettledInstallments = data["noSettledInstallments"];
            this.noOfInstallments = data["noOfInstallments"];
            this.collectedAmount = data["collectedAmount"];
            this.totalCollectedAmount = data["totalCollectedAmount"];
            this.collectedPercent = data["collectedPercent"];
            this.dueAmount = data["dueAmount"];
            this.remainingAmount = data["remainingAmount"];
            this.unitType = data["unitType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): CreateRetentionCollectionUnitPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRetentionCollectionUnitPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["soldDate"] = this.soldDate ? this.soldDate.toISOString() : <any>undefined;
        data["reservedDate"] = this.reservedDate ? this.reservedDate.toISOString() : <any>undefined;
        data["paymentPlan"] = this.paymentPlan;
        data["firstInstallment"] = this.firstInstallment ? this.firstInstallment.toISOString() : <any>undefined;
        data["lastInstallment"] = this.lastInstallment ? this.lastInstallment.toISOString() : <any>undefined;
        data["noSettledInstallments"] = this.noSettledInstallments;
        data["noOfInstallments"] = this.noOfInstallments;
        data["collectedAmount"] = this.collectedAmount;
        data["totalCollectedAmount"] = this.totalCollectedAmount;
        data["collectedPercent"] = this.collectedPercent;
        data["dueAmount"] = this.dueAmount;
        data["remainingAmount"] = this.remainingAmount;
        data["unitType"] = this.unitType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface ICreateRetentionCollectionUnitPlanCommand {
    soldDate?: Date | undefined;
    reservedDate?: Date | undefined;
    paymentPlan?: string | undefined;
    firstInstallment?: Date | undefined;
    lastInstallment?: Date | undefined;
    noSettledInstallments: number;
    noOfInstallments: number;
    collectedAmount: number;
    totalCollectedAmount: number;
    collectedPercent: number;
    dueAmount: number;
    remainingAmount: number;
    unitType: UnitType;
    retentionId?: string | undefined;
}

export class UpdateRetentionCollectionUnitPlanCommand implements IUpdateRetentionCollectionUnitPlanCommand {
    id?: string | undefined;
    soldDate?: Date | undefined;
    reservedDate?: Date | undefined;
    paymentPlan?: string | undefined;
    firstInstallment?: Date | undefined;
    lastInstallment?: Date | undefined;
    noSettledInstallments!: number;
    noOfInstallments!: number;
    collectedAmount!: number;
    totalCollectedAmount!: number;
    collectedPercent!: number;
    dueAmount!: number;
    remainingAmount!: number;
    unitType!: UnitType;
    retentionId?: string | undefined;

    constructor(data?: IUpdateRetentionCollectionUnitPlanCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.soldDate = data["soldDate"] ? new Date(data["soldDate"].toString()) : <any>undefined;
            this.reservedDate = data["reservedDate"] ? new Date(data["reservedDate"].toString()) : <any>undefined;
            this.paymentPlan = data["paymentPlan"];
            this.firstInstallment = data["firstInstallment"] ? new Date(data["firstInstallment"].toString()) : <any>undefined;
            this.lastInstallment = data["lastInstallment"] ? new Date(data["lastInstallment"].toString()) : <any>undefined;
            this.noSettledInstallments = data["noSettledInstallments"];
            this.noOfInstallments = data["noOfInstallments"];
            this.collectedAmount = data["collectedAmount"];
            this.totalCollectedAmount = data["totalCollectedAmount"];
            this.collectedPercent = data["collectedPercent"];
            this.dueAmount = data["dueAmount"];
            this.remainingAmount = data["remainingAmount"];
            this.unitType = data["unitType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): UpdateRetentionCollectionUnitPlanCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRetentionCollectionUnitPlanCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["soldDate"] = this.soldDate ? this.soldDate.toISOString() : <any>undefined;
        data["reservedDate"] = this.reservedDate ? this.reservedDate.toISOString() : <any>undefined;
        data["paymentPlan"] = this.paymentPlan;
        data["firstInstallment"] = this.firstInstallment ? this.firstInstallment.toISOString() : <any>undefined;
        data["lastInstallment"] = this.lastInstallment ? this.lastInstallment.toISOString() : <any>undefined;
        data["noSettledInstallments"] = this.noSettledInstallments;
        data["noOfInstallments"] = this.noOfInstallments;
        data["collectedAmount"] = this.collectedAmount;
        data["totalCollectedAmount"] = this.totalCollectedAmount;
        data["collectedPercent"] = this.collectedPercent;
        data["dueAmount"] = this.dueAmount;
        data["remainingAmount"] = this.remainingAmount;
        data["unitType"] = this.unitType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IUpdateRetentionCollectionUnitPlanCommand {
    id?: string | undefined;
    soldDate?: Date | undefined;
    reservedDate?: Date | undefined;
    paymentPlan?: string | undefined;
    firstInstallment?: Date | undefined;
    lastInstallment?: Date | undefined;
    noSettledInstallments: number;
    noOfInstallments: number;
    collectedAmount: number;
    totalCollectedAmount: number;
    collectedPercent: number;
    dueAmount: number;
    remainingAmount: number;
    unitType: UnitType;
    retentionId?: string | undefined;
}

export class RetentionsListViewModel implements IRetentionsListViewModel {
    retentions?: RetentionDto[] | undefined;

    constructor(data?: IRetentionsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["retentions"] && data["retentions"].constructor === Array) {
                this.retentions = [] as any;
                for (let item of data["retentions"])
                    this.retentions!.push(RetentionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RetentionsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.retentions && this.retentions.constructor === Array) {
            data["retentions"] = [];
            for (let item of this.retentions)
                data["retentions"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRetentionsListViewModel {
    retentions?: RetentionDto[] | undefined;
}

export class RetentionDto implements IRetentionDto {
    id?: string | undefined;
    clientName?: string | undefined;
    customerID?: string | undefined;
    contactNumber?: string | undefined;
    currentProject?: string | undefined;
    currentUnitNumber?: string | undefined;
    price!: number;
    gp!: number;
    gpValue!: number;
    simah!: boolean;
    typeOfCounterOffers?: string | undefined;
    description?: string | undefined;
    vas?: string | undefined;
    refNo?: string | undefined;

    constructor(data?: IRetentionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.clientName = data["clientName"];
            this.customerID = data["customerID"];
            this.contactNumber = data["contactNumber"];
            this.currentProject = data["currentProject"];
            this.currentUnitNumber = data["currentUnitNumber"];
            this.price = data["price"];
            this.gp = data["gp"];
            this.gpValue = data["gpValue"];
            this.simah = data["simah"];
            this.typeOfCounterOffers = data["typeOfCounterOffers"];
            this.description = data["description"];
            this.vas = data["vas"];
            this.refNo = data["refNo"];
        }
    }

    static fromJS(data: any): RetentionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientName"] = this.clientName;
        data["customerID"] = this.customerID;
        data["contactNumber"] = this.contactNumber;
        data["currentProject"] = this.currentProject;
        data["currentUnitNumber"] = this.currentUnitNumber;
        data["price"] = this.price;
        data["gp"] = this.gp;
        data["gpValue"] = this.gpValue;
        data["simah"] = this.simah;
        data["typeOfCounterOffers"] = this.typeOfCounterOffers;
        data["description"] = this.description;
        data["vas"] = this.vas;
        data["refNo"] = this.refNo;
        return data; 
    }
}

export interface IRetentionDto {
    id?: string | undefined;
    clientName?: string | undefined;
    customerID?: string | undefined;
    contactNumber?: string | undefined;
    currentProject?: string | undefined;
    currentUnitNumber?: string | undefined;
    price: number;
    gp: number;
    gpValue: number;
    simah: boolean;
    typeOfCounterOffers?: string | undefined;
    description?: string | undefined;
    vas?: string | undefined;
    refNo?: string | undefined;
}

export class CreateRetentionCommand implements ICreateRetentionCommand {
    clientName?: string | undefined;
    customerID?: string | undefined;
    contactNumber?: string | undefined;
    currentProject?: string | undefined;
    currentUnitNumber?: string | undefined;
    price!: number;
    gp!: number;
    gpValue!: number;
    simah!: boolean;
    typeOfCounterOffers?: string | undefined;
    description?: string | undefined;
    vas?: string | undefined;
    refNo?: string | undefined;

    constructor(data?: ICreateRetentionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.clientName = data["clientName"];
            this.customerID = data["customerID"];
            this.contactNumber = data["contactNumber"];
            this.currentProject = data["currentProject"];
            this.currentUnitNumber = data["currentUnitNumber"];
            this.price = data["price"];
            this.gp = data["gp"];
            this.gpValue = data["gpValue"];
            this.simah = data["simah"];
            this.typeOfCounterOffers = data["typeOfCounterOffers"];
            this.description = data["description"];
            this.vas = data["vas"];
            this.refNo = data["refNo"];
        }
    }

    static fromJS(data: any): CreateRetentionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRetentionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientName"] = this.clientName;
        data["customerID"] = this.customerID;
        data["contactNumber"] = this.contactNumber;
        data["currentProject"] = this.currentProject;
        data["currentUnitNumber"] = this.currentUnitNumber;
        data["price"] = this.price;
        data["gp"] = this.gp;
        data["gpValue"] = this.gpValue;
        data["simah"] = this.simah;
        data["typeOfCounterOffers"] = this.typeOfCounterOffers;
        data["description"] = this.description;
        data["vas"] = this.vas;
        data["refNo"] = this.refNo;
        return data; 
    }
}

export interface ICreateRetentionCommand {
    clientName?: string | undefined;
    customerID?: string | undefined;
    contactNumber?: string | undefined;
    currentProject?: string | undefined;
    currentUnitNumber?: string | undefined;
    price: number;
    gp: number;
    gpValue: number;
    simah: boolean;
    typeOfCounterOffers?: string | undefined;
    description?: string | undefined;
    vas?: string | undefined;
    refNo?: string | undefined;
}

export class UpdateRetentionCommand implements IUpdateRetentionCommand {
    id?: string | undefined;
    clientName?: string | undefined;
    customerID?: string | undefined;
    contactNumber?: string | undefined;
    currentProject?: string | undefined;
    currentUnitNumber?: string | undefined;
    price!: number;
    gp!: number;
    gpValue!: number;
    simah!: boolean;
    typeOfCounterOffers?: string | undefined;
    description?: string | undefined;
    vas?: string | undefined;
    refNo?: string | undefined;

    constructor(data?: IUpdateRetentionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.clientName = data["clientName"];
            this.customerID = data["customerID"];
            this.contactNumber = data["contactNumber"];
            this.currentProject = data["currentProject"];
            this.currentUnitNumber = data["currentUnitNumber"];
            this.price = data["price"];
            this.gp = data["gp"];
            this.gpValue = data["gpValue"];
            this.simah = data["simah"];
            this.typeOfCounterOffers = data["typeOfCounterOffers"];
            this.description = data["description"];
            this.vas = data["vas"];
            this.refNo = data["refNo"];
        }
    }

    static fromJS(data: any): UpdateRetentionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRetentionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientName"] = this.clientName;
        data["customerID"] = this.customerID;
        data["contactNumber"] = this.contactNumber;
        data["currentProject"] = this.currentProject;
        data["currentUnitNumber"] = this.currentUnitNumber;
        data["price"] = this.price;
        data["gp"] = this.gp;
        data["gpValue"] = this.gpValue;
        data["simah"] = this.simah;
        data["typeOfCounterOffers"] = this.typeOfCounterOffers;
        data["description"] = this.description;
        data["vas"] = this.vas;
        data["refNo"] = this.refNo;
        return data; 
    }
}

export interface IUpdateRetentionCommand {
    id?: string | undefined;
    clientName?: string | undefined;
    customerID?: string | undefined;
    contactNumber?: string | undefined;
    currentProject?: string | undefined;
    currentUnitNumber?: string | undefined;
    price: number;
    gp: number;
    gpValue: number;
    simah: boolean;
    typeOfCounterOffers?: string | undefined;
    description?: string | undefined;
    vas?: string | undefined;
    refNo?: string | undefined;
}

export class RetentionUnitsListViewModel implements IRetentionUnitsListViewModel {
    retentionUnits?: RetentionUnitDto[] | undefined;

    constructor(data?: IRetentionUnitsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["retentionUnits"] && data["retentionUnits"].constructor === Array) {
                this.retentionUnits = [] as any;
                for (let item of data["retentionUnits"])
                    this.retentionUnits!.push(RetentionUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RetentionUnitsListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionUnitsListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.retentionUnits && this.retentionUnits.constructor === Array) {
            data["retentionUnits"] = [];
            for (let item of this.retentionUnits)
                data["retentionUnits"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRetentionUnitsListViewModel {
    retentionUnits?: RetentionUnitDto[] | undefined;
}

export class RetentionUnitDto implements IRetentionUnitDto {
    id?: string | undefined;
    project?: string | undefined;
    unitNo?: string | undefined;
    price!: number;
    gp!: number;
    gpValue!: number;
    unitType!: UnitType;
    retentionId?: string | undefined;

    constructor(data?: IRetentionUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.project = data["project"];
            this.unitNo = data["unitNo"];
            this.price = data["price"];
            this.gp = data["gp"];
            this.gpValue = data["gpValue"];
            this.unitType = data["unitType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): RetentionUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["project"] = this.project;
        data["unitNo"] = this.unitNo;
        data["price"] = this.price;
        data["gp"] = this.gp;
        data["gpValue"] = this.gpValue;
        data["unitType"] = this.unitType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IRetentionUnitDto {
    id?: string | undefined;
    project?: string | undefined;
    unitNo?: string | undefined;
    price: number;
    gp: number;
    gpValue: number;
    unitType: UnitType;
    retentionId?: string | undefined;
}

export class GetAllRetentionUnitsQuery implements IGetAllRetentionUnitsQuery {
    unitType!: UnitType;

    constructor(data?: IGetAllRetentionUnitsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unitType = data["unitType"];
        }
    }

    static fromJS(data: any): GetAllRetentionUnitsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllRetentionUnitsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitType"] = this.unitType;
        return data; 
    }
}

export interface IGetAllRetentionUnitsQuery {
    unitType: UnitType;
}

export class CreateRetentionUnitCommand implements ICreateRetentionUnitCommand {
    project?: string | undefined;
    unitNo?: string | undefined;
    price!: number;
    gp!: number;
    gpValue!: number;
    unitType!: UnitType;
    retentionId?: string | undefined;

    constructor(data?: ICreateRetentionUnitCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.project = data["project"];
            this.unitNo = data["unitNo"];
            this.price = data["price"];
            this.gp = data["gp"];
            this.gpValue = data["gpValue"];
            this.unitType = data["unitType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): CreateRetentionUnitCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRetentionUnitCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["project"] = this.project;
        data["unitNo"] = this.unitNo;
        data["price"] = this.price;
        data["gp"] = this.gp;
        data["gpValue"] = this.gpValue;
        data["unitType"] = this.unitType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface ICreateRetentionUnitCommand {
    project?: string | undefined;
    unitNo?: string | undefined;
    price: number;
    gp: number;
    gpValue: number;
    unitType: UnitType;
    retentionId?: string | undefined;
}

export class UpdateRetentionUnitCommand implements IUpdateRetentionUnitCommand {
    id?: string | undefined;
    project?: string | undefined;
    unitNo?: string | undefined;
    price!: number;
    gp!: number;
    gpValue!: number;
    unitType!: UnitType;
    retentionId?: string | undefined;

    constructor(data?: IUpdateRetentionUnitCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.project = data["project"];
            this.unitNo = data["unitNo"];
            this.price = data["price"];
            this.gp = data["gp"];
            this.gpValue = data["gpValue"];
            this.unitType = data["unitType"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): UpdateRetentionUnitCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRetentionUnitCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["project"] = this.project;
        data["unitNo"] = this.unitNo;
        data["price"] = this.price;
        data["gp"] = this.gp;
        data["gpValue"] = this.gpValue;
        data["unitType"] = this.unitType;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IUpdateRetentionUnitCommand {
    id?: string | undefined;
    project?: string | undefined;
    unitNo?: string | undefined;
    price: number;
    gp: number;
    gpValue: number;
    unitType: UnitType;
    retentionId?: string | undefined;
}

export class RetentionWaiversListViewModel implements IRetentionWaiversListViewModel {
    retentionWaivers?: RetentionWaiverDto[] | undefined;

    constructor(data?: IRetentionWaiversListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["retentionWaivers"] && data["retentionWaivers"].constructor === Array) {
                this.retentionWaivers = [] as any;
                for (let item of data["retentionWaivers"])
                    this.retentionWaivers!.push(RetentionWaiverDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RetentionWaiversListViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionWaiversListViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.retentionWaivers && this.retentionWaivers.constructor === Array) {
            data["retentionWaivers"] = [];
            for (let item of this.retentionWaivers)
                data["retentionWaivers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRetentionWaiversListViewModel {
    retentionWaivers?: RetentionWaiverDto[] | undefined;
}

export class RetentionWaiverDto implements IRetentionWaiverDto {
    id?: string | undefined;
    installementAmount!: number;
    serviceChargeAmount!: number;
    bearingCost!: number;
    retentionId?: string | undefined;

    constructor(data?: IRetentionWaiverDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.installementAmount = data["installementAmount"];
            this.serviceChargeAmount = data["serviceChargeAmount"];
            this.bearingCost = data["bearingCost"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): RetentionWaiverDto {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionWaiverDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["installementAmount"] = this.installementAmount;
        data["serviceChargeAmount"] = this.serviceChargeAmount;
        data["bearingCost"] = this.bearingCost;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IRetentionWaiverDto {
    id?: string | undefined;
    installementAmount: number;
    serviceChargeAmount: number;
    bearingCost: number;
    retentionId?: string | undefined;
}

export class CreateRetentionWaiverCommand implements ICreateRetentionWaiverCommand {
    installementAmount!: number;
    serviceChargeAmount!: number;
    bearingCost!: number;
    retentionId?: string | undefined;

    constructor(data?: ICreateRetentionWaiverCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.installementAmount = data["installementAmount"];
            this.serviceChargeAmount = data["serviceChargeAmount"];
            this.bearingCost = data["bearingCost"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): CreateRetentionWaiverCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRetentionWaiverCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["installementAmount"] = this.installementAmount;
        data["serviceChargeAmount"] = this.serviceChargeAmount;
        data["bearingCost"] = this.bearingCost;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface ICreateRetentionWaiverCommand {
    installementAmount: number;
    serviceChargeAmount: number;
    bearingCost: number;
    retentionId?: string | undefined;
}

export class UpdateRetentionWaiverCommand implements IUpdateRetentionWaiverCommand {
    id?: string | undefined;
    installementAmount!: number;
    serviceChargeAmount!: number;
    bearingCost!: number;
    retentionId?: string | undefined;

    constructor(data?: IUpdateRetentionWaiverCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.installementAmount = data["installementAmount"];
            this.serviceChargeAmount = data["serviceChargeAmount"];
            this.bearingCost = data["bearingCost"];
            this.retentionId = data["retentionId"];
        }
    }

    static fromJS(data: any): UpdateRetentionWaiverCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRetentionWaiverCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["installementAmount"] = this.installementAmount;
        data["serviceChargeAmount"] = this.serviceChargeAmount;
        data["bearingCost"] = this.bearingCost;
        data["retentionId"] = this.retentionId;
        return data; 
    }
}

export interface IUpdateRetentionWaiverCommand {
    id?: string | undefined;
    installementAmount: number;
    serviceChargeAmount: number;
    bearingCost: number;
    retentionId?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC!: number;
    summary?: string | undefined;
    temperatureF!: number;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateFormatted = data["dateFormatted"];
            this.temperatureC = data["temperatureC"];
            this.summary = data["summary"];
            this.temperatureF = data["temperatureF"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data; 
    }
}

export interface IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC: number;
    summary?: string | undefined;
    temperatureF: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}
