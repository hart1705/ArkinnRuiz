// <auto-generated />
using System;
using AR.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AR.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190405082546_RetentionsChild")]
    partial class RetentionsChild
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AR.Domain.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int>("ContactStatus");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("OwnerId");

                    b.Property<string>("State");

                    b.Property<int>("Status");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("AR.Domain.Entities.Event", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AR.Domain.Entities.Registration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Course");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("EventId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Status");

                    b.Property<int>("StubNumber");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("AR.Domain.Entities.Retention", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientName");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("CurrentProject");

                    b.Property<string>("CurrentUnitNumber");

                    b.Property<string>("CustomerID");

                    b.Property<string>("Description");

                    b.Property<decimal>("GP");

                    b.Property<decimal>("GPValue");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<decimal>("Price");

                    b.Property<string>("RefNo");

                    b.Property<bool>("SIMAH");

                    b.Property<int>("Status");

                    b.Property<string>("TypeOfCounterOffers");

                    b.Property<string>("VAS");

                    b.HasKey("Id");

                    b.ToTable("Retentions");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionApproval", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApprovalType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("MyProperty");

                    b.Property<string>("Name");

                    b.Property<string>("Position");

                    b.Property<string>("RetentionId");

                    b.Property<string>("Signiture");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("RetentionId");

                    b.ToTable("RetentionApproval");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionCollectionUnitPlan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("CollectedAmount");

                    b.Property<decimal>("CollectedPercent");

                    b.Property<int>("CollectionType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<decimal>("DueAmount");

                    b.Property<DateTime?>("FirstInstallment");

                    b.Property<DateTime?>("LastInstallment");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("NoOfInstallments");

                    b.Property<int>("NoSettledInstallments");

                    b.Property<string>("PaymentPlan");

                    b.Property<decimal>("RemainingAmount");

                    b.Property<DateTime?>("ReservedDate");

                    b.Property<string>("RetentionId");

                    b.Property<DateTime?>("SoldDate");

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalCollectedAmount");

                    b.HasKey("Id");

                    b.HasIndex("RetentionId");

                    b.ToTable("RetentionCollectionUnitPlan");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionUnit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<decimal>("GP");

                    b.Property<decimal>("GPValue");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<decimal>("Price");

                    b.Property<string>("Project");

                    b.Property<string>("RetentionId");

                    b.Property<int>("Status");

                    b.Property<string>("UnitNo");

                    b.HasKey("Id");

                    b.HasIndex("RetentionId");

                    b.ToTable("RetentionUnit");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionWaiver", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("BearingCost");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<decimal>("InstallementAmount");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("RetentionId");

                    b.Property<decimal>("ServiceChargeAmount");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("RetentionId");

                    b.ToTable("RetentionWaiver");
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationAction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AccessNeeded");

                    b.Property<string>("ActionName");

                    b.Property<string>("ApplicationAction_Id");

                    b.Property<string>("ControllerName");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsHttpPOST");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ApplicationAction");
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationAction_ApplicationPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessType");

                    b.Property<string>("ApplicationActionId");

                    b.Property<string>("ApplicationPermissionId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationActionId");

                    b.HasIndex("ApplicationPermissionId");

                    b.ToTable("ApplicationAction_ApplicationPermission");
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationPermission_Id");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ApplicationPermission");
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationRole_ApplicationPermission", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("ApplicationPermissionId");

                    b.HasKey("RoleId", "ApplicationPermissionId");

                    b.HasIndex("ApplicationPermissionId");

                    b.ToTable("ApplicationRole_ApplicationPermission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsSysAdmin");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Status");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ContactId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Status");

                    b.HasIndex("ContactId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("AR.Domain.Entities.Registration", b =>
                {
                    b.HasOne("AR.Domain.Entities.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .HasConstraintName("Event");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionApproval", b =>
                {
                    b.HasOne("AR.Domain.Entities.Retention", "Retention")
                        .WithMany("RetentionApproval")
                        .HasForeignKey("RetentionId")
                        .HasConstraintName("RetentionA");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionCollectionUnitPlan", b =>
                {
                    b.HasOne("AR.Domain.Entities.Retention", "Retention")
                        .WithMany("RetentionCollectionUnitPlan")
                        .HasForeignKey("RetentionId")
                        .HasConstraintName("RetentionC");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionUnit", b =>
                {
                    b.HasOne("AR.Domain.Entities.Retention", "Retention")
                        .WithMany("RetentionUnit")
                        .HasForeignKey("RetentionId")
                        .HasConstraintName("RetentionU");
                });

            modelBuilder.Entity("AR.Domain.Entities.RetentionWaiver", b =>
                {
                    b.HasOne("AR.Domain.Entities.Retention", "Retention")
                        .WithMany("RetentionWaiver")
                        .HasForeignKey("RetentionId")
                        .HasConstraintName("RetentionW");
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationAction_ApplicationPermission", b =>
                {
                    b.HasOne("AR.Domain.Identity.ApplicationAction", "ApplicationAction")
                        .WithMany("ApplicationAction_ApplicationPermissions")
                        .HasForeignKey("ApplicationActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AR.Domain.Identity.ApplicationPermission", "ApplicationPermission")
                        .WithMany("ApplicationAction_ApplicationPermissions")
                        .HasForeignKey("ApplicationPermissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationRole_ApplicationPermission", b =>
                {
                    b.HasOne("AR.Domain.Identity.ApplicationPermission", "ApplicationPermission")
                        .WithMany("ApplicationRole_ApplicationPermissions")
                        .HasForeignKey("ApplicationPermissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AR.Domain.Identity.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationRole_ApplicationPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AR.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("AR.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");
                });
#pragma warning restore 612, 618
        }
    }
}
